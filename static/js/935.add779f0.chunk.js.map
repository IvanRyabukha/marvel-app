{"version":3,"file":"static/js/935.add779f0.chunk.js","mappings":"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","sources":["hooks/http.hook.jsx","services/MarvelService.js","components/errorMessage/ErrorMessage.jsx","components/appBanner/AppBanner.jsx","components/comicsList/ComicsList.jsx","components/pages/ComicsPage.jsx"],"sourcesContent":["import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  //\"Content-Type\": \"application/json\"\n\n  const request = useCallback(\n    async (\n      url,\n      method = \"GET\",\n      body = null,\n      headers = {}\n    ) => {\n      setLoading(true);\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        setLoading(false);\n\n        return data;\n      } catch (e) {\n        setLoading(false);\n        setError(e.message);\n        throw e;\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => setError(null), []);\n\n  return {loading, request, error, clearError};\n};\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n  const { loading, request, error, clearError } = useHttp();\n\n  const _apiBase = 'https://marvel-server-zeta.vercel.app/';\n  const _apiKey = 'apikey=d4eecb0c66dedbfae4eab45d312fc1df';\n  const _baseOffset = 0;\n\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n  \n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async (id) => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    \n    return _transformCharacter(res.data.results[0]);\n  };\n\n const _transformCharacter = (char) => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description ? `${char.description.length > 210 ? char.description.slice(0, 210) + '...' : char.description}` : `Character doesn't have description :(`,\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items.slice(0, 10),\n    }\n  };\n\n  const getAllComics = async (offset = _baseOffset) => {\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n  \n    return res.data.results.map(_transformComics);\n  };\n\n  const getComic = async (id) => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\n    return _transformComics(res.data.results[0]);\n  };\n\n  const _transformComics = (comics) => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || \"There is no description\",\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\n      language: comics.textObjects[0]?.languages || 'en-us',\n    };\n  };\n\n  return { loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic };\n};\n\nexport default useMarvelService;","import img from './error.gif';\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      src={img}\n      alt=\"Error gif\"\n      style={{ display: 'block', width: '250px', height: '250px',\n        objectFit: 'contain', margin: '0 auto'\n      }}\n    />\n  );\n};\n\nexport default ErrorMessage;","import \"./appBanner.scss\";\nimport avangers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n  return (\n    <div className=\"app__banner\">\n      <img src={avangers} alt=\"Avangers\" />\n      <div className=\"app__banner-text\">\n        New comics every week!<br/>\n        Stay tuned!\n      </div>\n      <img src={avengersLogo} alt=\"Avengers logo\" />\n    </div>\n  );\n};\n\nexport default AppBanner;\n","import { useState, useEffect } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { Link } from \"react-router-dom\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./comicsList.scss\";\n\nconst ComicsList = () => {\n  const [comicsList, setComicsList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(0);\n  const [comicsEnded, setComicsEnded] = useState(false);\n\n  const { loading, error, getAllComics } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n\n    getAllComics(offset).then(onComicsListLoaded);\n  };\n\n  const onComicsListLoaded = (newComicsList) => {\n    let ended = false;\n    if (newComicsList.length < 8) {\n      ended = true;\n    }\n\n    setComicsList((comicsList) => [...comicsList, ...newComicsList]);\n    setNewItemLoading(false);\n    setOffset((offset) => offset + 8);\n    setComicsEnded(ended);\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item) => {\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames={\"comics__item\"}>\n          <li className=\"comics__item\" >\n          <Link to={`/comics/${item.id}`}>\n            <img\n              src={item.thumbnail}\n              alt={item.title}\n              className=\"comics__item-img\"\n            />\n            <div className=\"comics__item-name\">{item.title}</div>\n            <div className=\"comics__item-price\">{item.price}</div>\n          </Link>\n        </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <ul className=\"comics__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  }\n\n  const items = renderItems(comicsList);\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n  return (\n    <div className=\"comics__list\">\n      {errorMessage}\n      {spinner}\n      {items}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{ display: comicsEnded ? \"none\" : \"block\" }}\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nexport default ComicsList;\n","import AppBanner from \"../appBanner/AppBanner\";\nimport ComicsList from \"../comicsList/ComicsList\";\n\nconst ComicsPage = () => {\n  return (\n    <>\n      <AppBanner />\n      <ComicsList />\n    </>\n  );\n};\n\nexport default ComicsPage;\n"],"names":["useMarvelService","loading","request","error","clearError","useHttp","setLoading","useState","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","id","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","price","prices","language","textObjects","languages","getAllCharacters","offset","results","map","getCharacter","res","getAllComics","getComic","ErrorMessage","_jsx","src","img","alt","style","display","width","height","objectFit","margin","AppBanner","_jsxs","className","children","avangers","avengersLogo","ComicsList","comicsList","setComicsList","newItemLoading","setNewItemLoading","setOffset","comicsEnded","setComicsEnded","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","arr","item","CSSTransition","timeout","classNames","Link","to","TransitionGroup","component","renderItems","errorMessage","spinner","Spinner","disabled","onClick","ComicsPage","_Fragment"],"sourceRoot":""}
{"version":3,"file":"static/js/465.6052b026.chunk.js","mappings":"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","sources":["hooks/http.hook.jsx","services/MarvelService.js","components/errorMessage/ErrorMessage.jsx","components/randomChar/RandomChar.jsx","components/charList/CharList.jsx","components/skeleton/Skeleton.jsx","components/charInfo/CharInfo.jsx","components/errorBoundary/ErrorBoundary.jsx","components/pages/MainPage.jsx"],"sourcesContent":["import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  //\"Content-Type\": \"application/json\"\n\n  const request = useCallback(\n    async (\n      url,\n      method = \"GET\",\n      body = null,\n      headers = {}\n    ) => {\n      setLoading(true);\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        setLoading(false);\n\n        return data;\n      } catch (e) {\n        setLoading(false);\n        setError(e.message);\n        throw e;\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => setError(null), []);\n\n  return {loading, request, error, clearError};\n};\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n  const { loading, request, error, clearError } = useHttp();\n\n  const _apiBase = 'https://marvel-server-zeta.vercel.app/';\n  const _apiKey = 'apikey=d4eecb0c66dedbfae4eab45d312fc1df';\n  const _baseOffset = 0;\n\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n  \n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async (id) => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    \n    return _transformCharacter(res.data.results[0]);\n  };\n\n const _transformCharacter = (char) => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description ? `${char.description.length > 210 ? char.description.slice(0, 210) + '...' : char.description}` : `Character doesn't have description :(`,\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items.slice(0, 10),\n    }\n  };\n\n  const getAllComics = async (offset = _baseOffset) => {\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n  \n    return res.data.results.map(_transformComics);\n  };\n\n  const getComic = async (id) => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\n    return _transformComics(res.data.results[0]);\n  };\n\n  const _transformComics = (comics) => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || \"There is no description\",\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\n      language: comics.textObjects[0]?.languages || 'en-us',\n    };\n  };\n\n  return { loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic };\n};\n\nexport default useMarvelService;","import img from './error.gif';\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      src={img}\n      alt=\"Error gif\"\n      style={{ display: 'block', width: '250px', height: '250px',\n        objectFit: 'contain', margin: '0 auto'\n      }}\n    />\n  );\n};\n\nexport default ErrorMessage;","import { useState, useEffect } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./randomChar.scss\";\n\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({});\n\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * 20) + 1;\n    getCharacter(id).then(onCharLoaded);\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"randomchar\">\n      {errorMessage}\n      {spinner}\n      {content}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today! Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n\n        <button className=\"button button__main\" onClick={updateChar}>\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki } = char;\n\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        className=\"randomchar__img\"\n        src={thumbnail}\n        alt=\"Random character\"\n        style={imgStyle}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./charList.scss\";\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(0);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { loading, error, getAllCharacters } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n\n    getAllCharacters(offset).then(onCharListLoaded);\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList((charList) => [...charList, ...newCharList]);\n    setNewItemLoading((newItemLoading) => false);\n    setOffset((offset) => offset + 9);\n    setCharEnded((charEnded) => ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) =>\n      item.classList.remove(\"char__item_selected\")\n    );\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n      if (\n        item.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ) {\n        imgStyle = { objectFit: \"unset\" };\n      }\n\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames={`char__item`}>\n          <li\n            className={`char__item`}\n            onClick={() => {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }}\n            onKeyPress={(e) => {\n              e.preventDefault();\n              if (e.key === \" \" || e.key === \"Enter\") {\n                props.onCharSelected(item.id);\n                focusOnItem(i);\n              }\n            }}\n            tabIndex={0}\n            ref={(el) => (itemRefs.current[i] = el)}\n          >\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  }\n\n  const items = renderItems(charList);\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n  return (\n    <div className=\"char__list\">\n      {errorMessage}\n      {spinner}\n      {items}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import \"./skeleton.scss\";\n\nconst Skeleton = () => {\n  return (\n    <>\n      <p className=\"char__select\">\n        Please select a character to see information\n      </p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </>\n  );\n};\n\nexport default Skeleton;\n","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n\n  const updateChar = () => {\n    const { charId } = props;\n\n    if (!charId) {\n      return;\n    }\n\n    clearError();\n    getCharacter(charId).then(onCharLoaded);\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const skeleton = char || loading || error ? null : <Skeleton />;\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"char__info\">\n      {skeleton}\n      {errorMessage}\n      {spinner}\n      {content}\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\n        {comics.map((item, i) => {\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n  state = {\n    error: false,\n  };\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({ error: true });\n  }\n\n  render() {\n    if (this.state.error) {\n      return <ErrorMessage />\n    }\n\n    return this.props.children;\n  }\n};\n\nexport default ErrorBoundary;\n\n\n","import { useState } from \"react\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from \"../../resources/img/vision.png\";\n\nconst MainPage = () => {\n  const [selectedChar, setChar] = useState(null);\n\n  const onCharSelected = (id) => {\n    setChar(id);\n  };\n  return (\n    <>\n      <ErrorBoundary>\n        <RandomChar />\n      </ErrorBoundary>\n      <div className=\"char__content\">\n        <ErrorBoundary>\n          <CharList onCharSelected={onCharSelected} />\n        </ErrorBoundary>\n        <ErrorBoundary>\n          <CharInfo charId={selectedChar} />\n        </ErrorBoundary>\n      </div>\n\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n    </>\n  );\n};\n\nexport default MainPage;\n"],"names":["useMarvelService","loading","request","error","clearError","useHttp","setLoading","useState","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","id","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","price","prices","language","textObjects","languages","getAllCharacters","offset","results","map","getCharacter","res","getAllComics","getComic","ErrorMessage","_jsx","src","img","alt","style","display","width","height","objectFit","margin","View","_ref","imgStyle","_jsxs","className","children","href","RandomChar","setChar","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","CSSTransition","timeout","classNames","onCharSelected","onKeyPress","preventDefault","key","tabIndex","ref","el","TransitionGroup","component","renderItems","disabled","Skeleton","_Fragment","charId","skeleton","ErrorBoundary","Component","constructor","state","componentDidCatch","errorInfo","this","setState","render","MainPage","selectedChar","CharList","CharInfo","decoration"],"sourceRoot":""}